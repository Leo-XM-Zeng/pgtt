----
-- Regression test to Global Temporary Table implementation
--
-- Test for GTT with index, the temporary table must have the
-- index too.
--
----
-- Import the library
LOAD 'pgtt';
-- Create a GTT like table
CREATE /*GLOBAL*/ TEMPORARY TABLE t_glob_temptable1 (id integer, lbl text) ON COMMIT PRESERVE ROWS;
SET pgtt.enabled TO off;
CREATE INDEX ON pgtt_schema.t_glob_temptable1 (id);
CREATE INDEX ON pgtt_schema.t_glob_temptable1 (lbl);
-- Look at Global Temporary Table definition
SELECT nspname, relname, preserved, code FROM pgtt_schema.pg_global_temp_tables;
   nspname   |      relname      | preserved |         code         
-------------+-------------------+-----------+----------------------
 pgtt_schema | t_glob_temptable1 | t         | id integer, lbl text
(1 row)

-- A "template" unlogged table should exists
\d pgtt_schema.t_glob_temptable1;
  Unlogged table "pgtt_schema.t_glob_temptable1"
 Column |  Type   | Collation | Nullable | Default 
--------+---------+-----------+----------+---------
 id     | integer |           |          | 
 lbl    | text    |           |          | 
Indexes:
    "t_glob_temptable1_id_idx" btree (id)
    "t_glob_temptable1_lbl_idx" btree (lbl)

SET pgtt.enabled TO on;
-- With the first insert some value in the temporary table
INSERT INTO t_glob_temptable1 VALUES (1, 'One');
-- Look if we have two tables now
SELECT regexp_replace(n.nspname, '\d+', 'x', 'g'), c.relname FROM pg_class c JOIN pg_namespace n ON (c.relnamespace=n.oid) WHERE relname = 't_glob_temptable1';
 regexp_replace |      relname      
----------------+-------------------
 pgtt_schema    | t_glob_temptable1
 pg_temp_x      | t_glob_temptable1
(2 rows)

-- and that the temporary table has the indexes too
SELECT tablename, indexname FROM pg_indexes WHERE tablename = 't_glob_temptable1' and schemaname LIKE 'pg_temp_%' ORDER BY tablename, indexname;
     tablename     |         indexname         
-------------------+---------------------------
 t_glob_temptable1 | t_glob_temptable1_id_idx
 t_glob_temptable1 | t_glob_temptable1_lbl_idx
(2 rows)

INSERT INTO t_glob_temptable1 VALUES (2, 'two');
-- Verify that the index is used
EXPLAIN (COSTS OFF) SELECT * FROM t_glob_temptable1 WHERE id = 2;
                     QUERY PLAN                      
-----------------------------------------------------
 Bitmap Heap Scan on t_glob_temptable1
   Recheck Cond: (id = 2)
   ->  Bitmap Index Scan on t_glob_temptable1_id_idx
         Index Cond: (id = 2)
(4 rows)

-- Reconnect and drop it
\c - -
LOAD 'pgtt';
-- Cleanup
DROP TABLE t_glob_temptable1;
